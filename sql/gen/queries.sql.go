// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const doesUserExist = `-- name: DoesUserExist :one
SELECT EXISTS(SELECT 1 FROM users WHERE subject = $1)
`

func (q *Queries) DoesUserExist(ctx context.Context, subject string) (bool, error) {
	row := q.db.QueryRow(ctx, doesUserExist, subject)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const hasKeys = `-- name: HasKeys :one
SELECT EXISTS(SELECT 1 FROM keys WHERE user_id = $1)
`

func (q *Queries) HasKeys(ctx context.Context, userID int64) (bool, error) {
	row := q.db.QueryRow(ctx, hasKeys, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertKeys = `-- name: InsertKeys :one
INSERT INTO keys (user_id, password_id, type, public, private)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, password_id, type, public, private
`

type InsertKeysParams struct {
	UserID     int64
	PasswordID pgtype.Int8
	Type       int32
	Public     []byte
	Private    []byte
}

func (q *Queries) InsertKeys(ctx context.Context, arg InsertKeysParams) (Key, error) {
	row := q.db.QueryRow(ctx, insertKeys,
		arg.UserID,
		arg.PasswordID,
		arg.Type,
		arg.Public,
		arg.Private,
	)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordID,
		&i.Type,
		&i.Public,
		&i.Private,
	)
	return i, err
}

const insertPassword = `-- name: InsertPassword :one
INSERT INTO passwords (hash, salt, iterations)
VALUES ($1, $2, $3)
RETURNING id, hash, salt, iterations
`

type InsertPasswordParams struct {
	Hash       []byte
	Salt       []byte
	Iterations int64
}

func (q *Queries) InsertPassword(ctx context.Context, arg InsertPasswordParams) (Password, error) {
	row := q.db.QueryRow(ctx, insertPassword, arg.Hash, arg.Salt, arg.Iterations)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Salt,
		&i.Iterations,
	)
	return i, err
}

const insertSecret = `-- name: InsertSecret :one
INSERT INTO secrets (value, key, url, tags, user_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, value, key, url, tags, user_id, secret_sharing, created_at, updated_at
`

type InsertSecretParams struct {
	Value  []byte
	Key    string
	Url    string
	Tags   string
	UserID int64
}

func (q *Queries) InsertSecret(ctx context.Context, arg InsertSecretParams) (Secret, error) {
	row := q.db.QueryRow(ctx, insertSecret,
		arg.Value,
		arg.Key,
		arg.Url,
		arg.Tags,
		arg.UserID,
	)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Key,
		&i.Url,
		&i.Tags,
		&i.UserID,
		&i.SecretSharing,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (subject, email, full_name)
VALUES ($1, $2, $3)
RETURNING id, subject, email, full_name, created_at, updated_at
`

type InsertUserParams struct {
	Subject  string
	Email    string
	FullName string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Subject, arg.Email, arg.FullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Email,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectKeys = `-- name: SelectKeys :one
SELECT id, user_id, password_id, type, public, private
FROM keys
WHERE user_id = $1
`

func (q *Queries) SelectKeys(ctx context.Context, userID int64) (Key, error) {
	row := q.db.QueryRow(ctx, selectKeys, userID)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PasswordID,
		&i.Type,
		&i.Public,
		&i.Private,
	)
	return i, err
}

const selectPassword = `-- name: SelectPassword :one
SELECT id, hash, salt, iterations
FROM passwords
WHERE id = $1
`

func (q *Queries) SelectPassword(ctx context.Context, id int64) (Password, error) {
	row := q.db.QueryRow(ctx, selectPassword, id)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Salt,
		&i.Iterations,
	)
	return i, err
}

const selectPrivateKey = `-- name: SelectPrivateKey :one
SELECT private
FROM keys
WHERE user_id = $1
`

func (q *Queries) SelectPrivateKey(ctx context.Context, userID int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, selectPrivateKey, userID)
	var private []byte
	err := row.Scan(&private)
	return private, err
}

const selectPublicKey = `-- name: SelectPublicKey :one
SELECT public
FROM keys
WHERE user_id = $1
`

func (q *Queries) SelectPublicKey(ctx context.Context, userID int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, selectPublicKey, userID)
	var public []byte
	err := row.Scan(&public)
	return public, err
}

const selectSecrets = `-- name: SelectSecrets :many
SELECT id, value, key, url, tags, user_id, secret_sharing, created_at, updated_at
FROM secrets
WHERE user_id = $1
`

func (q *Queries) SelectSecrets(ctx context.Context, userID int64) ([]Secret, error) {
	rows, err := q.db.Query(ctx, selectSecrets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Key,
			&i.Url,
			&i.Tags,
			&i.UserID,
			&i.SecretSharing,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserByName = `-- name: SelectUserByName :one
SELECT id, subject, email, full_name, created_at, updated_at
FROM users
WHERE subject = $1
`

func (q *Queries) SelectUserByName(ctx context.Context, subject string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByName, subject)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Email,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSecret = `-- name: UpdateSecret :one
UPDATE secrets
SET value = $1,
    key   = $2,
    url   = $3,
    tags  = $4
WHERE user_id = $5
  AND id = $6
RETURNING id, value, key, url, tags, user_id, secret_sharing, created_at, updated_at
`

type UpdateSecretParams struct {
	Value  []byte
	Key    string
	Url    string
	Tags   string
	UserID int64
	ID     int64
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) (Secret, error) {
	row := q.db.QueryRow(ctx, updateSecret,
		arg.Value,
		arg.Key,
		arg.Url,
		arg.Tags,
		arg.UserID,
		arg.ID,
	)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.Key,
		&i.Url,
		&i.Tags,
		&i.UserID,
		&i.SecretSharing,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
